e ::=
    | b | n | x | c | s
    | break
    | e1 + e2 | e1 * e2 | e1 / e2 | e1 % e2
    | x := e
    | e1 == e2 | e1 != e2
    | e1 < e2 | e1 > e2 | e1 <= e2 | e1 >= e2
    | e1 || e2 | e1 && e2 | e1 ^ e2
    | !e
    | -e

s ::=
    | e;
    | loop e { s }
    | if e { s } | if e { s1 } else { s2 }
    | return e;

v ::= b | n | c | s

b ::= true | false

s ::= "c*"

input????
statements vs expressions?
arrays
functions
entry point: main()
all functions return a value or 0 (to simplify, we just don't allow void functions)

heap 0 is stack pointer
when calling a function, the caller grabs the stack pointer, updates the stack pointer, and saves the new one


builtins:
    print_char()
    print_int()
    print_string()
    read_char()
    read_int()
    read_line()
    length() //arrays or strings
